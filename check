import os
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from webdriver_manager.firefox import GeckoDriverManager
import time
import logging
import browser_cookie3
from time import sleep
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
from webdriver_manager.chrome import ChromeDriverManager


#read values from a File
file_path =input("Enter the File Path : ")

try:
    with open(file_path, 'r') as f:
        #Read each line
        asin = [line.strip()for line in f]
except FileNotFoundError:
    print(f"Error: The file '{file_path}' was not found.")
    driver.quit()
    exit(1)

# Function to set up and open a new browser window
def setup_browser():
    # Set Chrome options
    firefox_options = FirefoxOptions()
    firefox_options.add_argument("--start-maximized")
    #firefox_options.add_argument("--headless")
    service = FirefoxService(executable_path=GeckoDriverManager().install())
    driver = webdriver.Firefox(service=service, options=firefox_options)
    return driver

def cookie_sel():
    cookiejar = browser_cookie3.firefox(domain_name='midway-auth.amazon.com')
    cookie_sel = []
    for ir in cookiejar:
        cookie_dict = {}
        if ir.name == 'session' or ir.name == 'amazon_enterprise_access':
            cookie_dict ={'name': ir.name, 'value': ir.value, 'path': ir.path, 'expiry': ir.expires}
            cookie_sel.append(cookie_dict)
    return cookie_sel

def Firefox_AEA():
    user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36'
    options = webdriver.FirefoxOptions()
    options.set_preference("browser.download.folderList", 2)
    options.set_preference("browser.helperApps.alwaysAsk.force", False)
    # options.set_preference("browser.download.dir", OUTPUT_FOLDER)
    options.set_preference("browser.helperApps.neverAsk.openFile",
                           "'text/plain,text/csv,application/csv,application/octet-stream")
    options.set_preference("browser.helperApps.neverAsk.saveToDisk",
                           "'text/plain,text/csv,application/csv,application/octet-stream")
    options.set_preference("general.useragent.override", user_agent)
    from selenium.webdriver.firefox.service import Service
    drive = GeckoDriverManager().install()
    fire_service = Service(drive)
    driver = webdriver.Firefox(service=fire_service, options=options)
    driver.get('https://midway-auth.amazon.com')
    driver.maximize_window()
    cookie_sel1 = cookie_sel()
    for cook in cookie_sel1:
        driver.add_cookie(cook)
    sleep(2)
    driver.get('https://midway-auth.amazon.com')
    while True:
        try:
            driver.find_element(By.ID, 'page')
            break
        except Exception as e:
            pass
    return driver
driver = Firefox_AEA()

results=[]

def enter_values(asin):
    for asins in asin:
        try:
            # Construct URL
            base_url = "https://src-na.corp.amazon.com/procurability/?asin="  # Replace with actual base URL
            full_url = f"{base_url}{asin}&iog=1"

            # Open URL
            driver.get(full_url)

            # Wait for the table to load
            wait.until(EC.presence_of_element_located((By.CLASS_NAME,"text-success")))

            #Find the procurability Status
            procurability_element=driver.find_elements(By.CLASS_NAME,"text-success")
            procurability_status=procurability_element.text

            #save the asin and proc. status
            results.append({"ASIN":asin,"Procurability":procurability_status})

        except (TimeoutException, NoSuchElementException)as e:
            print(f"failed to load or fetch data for ASIN: {asin}")
            results.append({"ASIN": asin, "Procurability": procurability_status})


#Call the function
if asin:
    enter_values(asin)
else:
    print("The File is empty, no values to submit. ")

driver.quit()
df = pd.DataFrame(report_data)
output_file_path=input("Enter the Path to sava the report: ")
df.to_excel(output_file_path, index=False)
print("Report Generated!!!")
